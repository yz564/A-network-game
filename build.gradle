/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'com.bmuschko.clover' version '2.2.3'
}
subprojects {
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    repositories {
        jcenter()
    }

    dependencies {
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
        implementation 'com.google.guava:guava:28.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        clover 'org.openclover:clover:4.3.1'
        testCompile "org.mockito:mockito-core:2.+"
        testCompile "org.testfx:testfx-core:4.0.16-alpha"
        testCompile "org.testfx:testfx-junit5:4.0.16-alpha"
        testCompile group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
        testRuntime 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
    }
    clover {
        compiler {
            additionalArgs = "-g:lines,source,vars"
        }
    }
    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
        // test headless
        systemProperty "testfx.headless", "true"
        systemProperty "testfx.robot", "glass"
    }
    configurations {
        testPkg {
            extendsFrom(testRuntime)
        }
    }

    task testCode(type: Jar) {
        classifier = 'test'
        from sourceSets.test.output
    }

    artifacts {
        testPkg testCode
    }

    task resolveDependencies {

        doLast {

            project.rootProject.allprojects.each { subProject ->

                subProject.buildscript.configurations.each { configuration ->

                    if (configuration.canBeResolved) {

                        configuration.resolve()

                    }

                }

                subProject.configurations.each { configuration ->

                    if (configuration.canBeResolved) {
                        configuration.resolve()

                    }

                }

            }

        }

    }

}

// Project specific stuff
project(':shared') {
}
project(':server') {
    dependencies {
        implementation project(':shared')
        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}
project(':client') {
    dependencies {
        implementation project(':shared')
        testImplementation project(path: ':shared', configuration: "testPkg")
    }
}

clover {
    report {
        json = true
        html = true
    }
}

tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run', false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}
