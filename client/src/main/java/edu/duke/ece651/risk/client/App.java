/*
 * This Java source file was generated by the Gradle 'init' task.
 */
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.risk.client;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

import edu.duke.ece651.risk.shared.ObjectIO;

/**
 *in and out are objectIOStream
 *tmp stores the most recent ObjectIO read by the client (sent from the server)
 */
public class App implements Runnable{
  Socket server;
  ObjectInputStream in;
  ObjectOutputStream out;
  ObjectIO tmp;
  BufferedReader stdIn;
  volatile ArrayList<Player> players;
  volatile int currentRoomId;
  volatile HashSet<Integer> joinedRoomId;

  private String serverAdd;

  public App(String serverAdd) {
    this.serverAdd = serverAdd;
  }

  public App() {
    this.server = null;
    this.in = null;
    this.out = null;
    this.tmp = null;
    this.stdIn = null;
    this.players = null;
    this.joinedRoomId = null;
  }

  public String tryConnect() {
    try (var socket = new Socket("localhost", 3333)){
      this.server = socket;
      this.out = new ObjectOutputStream(socket.getOutputStream());
      this.in = new ObjectInputStream(socket.getInputStream());
      this.tmp = null;
      this.initializeApp(in, out, tmp);
    }
    catch (Exception e){
      return "Server address does not exist!";
    }
    return null;
  }

  public void initializeApp(ObjectInputStream in, ObjectOutputStream out, ObjectIO tmp) {
    this.in = in;
    this.out = out;
    this.tmp = tmp;
    this.stdIn = new BufferedReader(new InputStreamReader(System.in));
    this.players = new ArrayList<Player>();
    for (int i = 0; i < 4; i++) {
      players.add(new Player(i,in, out,stdIn));
    }
    this.joinedRoomId = new HashSet<Integer>();
  }

  /**
   * A simple constructor
   */
  public App(ObjectInputStream in, ObjectOutputStream out, ObjectIO tmp) {
    this.in = in;
    this.out = out;
    this.tmp = tmp;
    this.stdIn = new BufferedReader(new InputStreamReader(System.in));
    this.players = new ArrayList<Player>();
    for (int i = 0; i < 4; i++) {
      players.add(new Player(i,in, out,stdIn));
    }
    this.joinedRoomId = new HashSet<Integer>();
  }


  public void runOnePlayer() throws Exception{
    String tmpS;
    if (!joinedRoomId.contains(currentRoomId)){
      Player p = players.get(currentRoomId);
    Thread t = new Thread(p);
    t.start();
    players.set(currentRoomId, p);
    joinedRoomId.add(currentRoomId);
     }
     players.get(currentRoomId).setWait(true);
    while (true) {
      if (players.get(currentRoomId).isWait()) {
        players.get(currentRoomId).ready=true;
        if((tmpS = stdIn.readLine()) != null){
        if (tmpS.equals("/leave")) {
          out.writeObject(new ObjectIO(tmpS));
          out.flush();
          out.reset();
          break;
        }
        players.get(currentRoomId).updateInput(tmpS);
      }
        }
    }
  }

  public ObjectIO receiveMessage() throws Exception {
    return (ObjectIO) in.readObject();
  }

  public void sendMessage(ObjectIO info) throws Exception{
    out.writeObject(info);
    out.flush();
    out.reset();
  }

  public String tryLogin(String userName, String password) throws Exception {
    HashMap<String, String> loginInfo = new HashMap<>();
    loginInfo.put("username", userName);
    loginInfo.put("password", password);
    sendMessage(new ObjectIO(loginInfo));
    ObjectIO serverResponse = receiveMessage();
    if (serverResponse.id == -1) {
      return serverResponse.message;
    }
    return null;
  }


  public Boolean tryLogin() throws Exception {
    String tmpS;
    for (int i = 0; i < 2; i++) {
      if ((tmp = (ObjectIO) in.readObject()) != null) {
      }
      System.out.println(tmp.message);
      if ((tmpS = stdIn.readLine()) != null) {
      }
      out.writeObject(new ObjectIO(tmpS));
      out.flush();
      out.reset();
    }
     if ((tmp = (ObjectIO) in.readObject()) != null) {
      }
      System.out.println(tmp.message);
      return tmp.id==0;
  }
    public Boolean tryJoinRoom() throws Exception {
      while (!tryLogin()) {
      }
    String tmpS;
    if ((tmp = (ObjectIO) in.readObject()) != null) {
    }
    System.out.println(tmp.message);
    if ((tmpS = stdIn.readLine()) != null) {
    }
    out.writeObject(new ObjectIO(tmpS,Integer.parseInt(tmpS)));
    currentRoomId = Integer.parseInt(tmpS)-1;
    out.flush();
    out.reset();
    if ((tmp = (ObjectIO) in.readObject()) != null) {
    }
    System.out.println(tmp.message);
    return tmp.id == 0;
  }

  public void run(){
    try (var socket = new Socket("localhost", 3333)) {
      this.server = socket;
      this.out = new ObjectOutputStream(socket.getOutputStream());
      this.in = new ObjectInputStream(socket.getInputStream());
      //ObjectIO tmp = null;
      //App client = new App(in, out, tmp);
    }catch(Exception e){}
    while (true){}
  }

/**
 *the enter point of the client.
 *after connecting with the server, new App, and call its method to communicate with the server(game).
 */
  public static void main(String[] args) throws Exception {
    System.out.println("Please enter server address: (default is localhost by hitting Enter)");
    BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
    String ServerAddress = stdIn.readLine();
    if (ServerAddress.equals("")) {
      ServerAddress = "localhost";
    }
    int portNumber = 3333;
    try (var server = new Socket(ServerAddress, portNumber)) {
      ObjectOutputStream out = new ObjectOutputStream(server.getOutputStream());
      ObjectInputStream in = new ObjectInputStream(server.getInputStream());
      ObjectIO tmp = null;
      App client = new App(in, out, tmp);
      //while (!client.tryLogin()) {}
      while(true){
      while (!client.tryJoinRoom()) {
      }
      client.runOnePlayer();
      }
    }catch(Exception e){}
  }
}












